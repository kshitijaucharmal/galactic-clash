go.property("health", 100)
go.property("direction", hash("up"))
go.property("bullet_speed", 1000)
go.property("old_position", vmath.vector3())

function init(self)
	msg.post(".", "acquire_input_focus")

	self.old_position = go.get_position()
end

function set_position(self, pos)
	local dir = vmath.normalize(pos - go.get_position())
	local rotation = vmath.quat_rotation_z(math.atan2(dir.y, dir.x) - (90 * math.pi/180))
	pos.z = 1
	go.animate(".", "rotation", go.PLAYBACK_ONCE_FORWARD, rotation, go.EASING_INOUTCIRC, 0.1, 0, function()
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_INOUTSINE, 0.5, 0, function()
			self.old_position = go.get_position()
		end)
	end)
end

function rotate(self, dir)
	self.direction = hash(dir)
	local rotation = 0
	if dir == "left" then
		rotation = vmath.quat_rotation_z(90 * math.pi / 180)
	elseif dir == "right" then
		rotation = vmath.quat_rotation_z(-90 * math.pi / 180)
	elseif dir == "up" then
		rotation = vmath.quat_rotation_z(0)
	elseif dir == "down" then
		rotation = vmath.quat_rotation_z(180 * math.pi / 180)
	end
	go.animate(".", "rotation", go.PLAYBACK_ONCE_FORWARD, rotation, go.EASING_INOUTCIRC, 0.5)
end

function die()
	msg.post("manager", "player_death")
	go.delete()
end

function shoot_laser(self)
	print("player shooting")
	local bullet = factory.create("#bullet_factory", go.get_position())
	local pos = vmath.vector3()
	if self.direction == hash("left") then
		pos.x = go.get_position().x * -100
		pos.y = go.get_position().y
	elseif self.direction == hash("right") then
		pos.x = go.get_position().x * 100
		pos.y = go.get_position().y
	elseif self.direction == hash("up") then
		pos.x = go.get_position().x 
		pos.y = go.get_position().y * 100
	elseif self.direction == hash("down") then
		pos.x = go.get_position().x
		pos.y = go.get_position().y * -100
	end
	local duration = vmath.length(pos - go.get_position()) / self.bullet_speed
	go.animate(bullet, "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_LINEAR, duration, 0, function()
		go.delete(bullet)
	end)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("player_pos") then
		set_position(self, message[1])
	end

	if message_id == hash("archer_attack") then
		-- Reduce health randomly between 5 and 10 HP
		self.health = self.health - math.random(5, 10)
		if self.health <= 0 then 
			die() 
		end
	end

	if message_id == hash("rotate") then
		rotate(self, message[1])
	end

	if message_id == hash("shoot") then
		shoot_laser(self)
		go.set("grid_maker#grid_maker", "can_play", false)
		msg.post("manager", "player_done")
	end
end

function final(self)
	msg.post(".", "release_input_focus")
end