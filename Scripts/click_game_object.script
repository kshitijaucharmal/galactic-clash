local goput = require "main.goput"
go.property("pos_to_go", vmath.vector3())
go.property("deck_filled", false)

local function random_position()
	local w = sys.get_config("display.width")
	local h = sys.get_config("display.height")
	return vmath.vector3(math.random(1, w), math.random(1, h), 0)
end

local function distribute_all_cards()
	if go.get("#click_game_object", "deck_filled") then 
		print("Empty the deck first")
		return
	end
	ctr = 0
	card_timer = timer.delay(0.15, true, function()
		local pos_to_go = go.get("#click_game_object", "pos_to_go")
		if pos_to_go == nil then return end

		card_id = factory.create("#card_factory", go.get_position())
		go.animate(card_id, "position", go.PLAYBACK_ONCE_FORWARD, pos_to_go, go.EASING_INOUTCIRC, 0.5)
		msg.post("card_area", "pos_filled")

		ctr = ctr + 1
		if ctr > 3 then timer.cancel(card_timer) end
	end)

	go.set("#click_game_object", "deck_filled", true)
end

local function handle_click(url, action_id, action)
	-- TODO: use message passing to get location of curent card holder
	if action_id == hash("leftclick") and action.released then
		distribute_all_cards()
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("current_position") then
		self.pos_to_go = message[1]
	end

	if message_id == hash("empty_deck") then
		self.deck_filled = false
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")

	self.pos_to_go = go.get_position()
	goput.add("#sprite", nil, handle_click)

	go.animate(".", "scale", go.PLAYBACK_LOOP_PINGPONG, vmath.vector3(1.2, 1.2, 1), go.EASING_INOUTCIRC, 0.5)
end

function final(self)
	msg.post(".", "release_input_focus")
end

function on_input(self, action_id, action)
	return goput.on_input("#sprite", action_id, action)
end
